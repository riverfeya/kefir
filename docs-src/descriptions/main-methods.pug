h2#main-methods Subscribe / add side effects

+descr-method('observe', 'observe', 'obs.observe(observer) obs.observe([onValue], [onError], [onEnd])').
  Подписывает предоставленного #[b observer] на #[b obs]. Observer это объект с тремя не обязательными методами:

ul
  li #[b value] - вызывается в значениях из observable
  li #[b error] - вызывается в ошибках из observable
  li #[b end] - вызывается в конце observable

p.
  Возвращает объект подписки, #[tt Subscription], который имеет метод отмены подписки
  #[tt unsubscribe] и read-only свойство #[tt closed].
  #[tt closed] указывает был ли вызван метод #[tt unsubscribe] или observable завершился.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(1000, [1, 2]);
    var subscription = stream.observe({
      value(value) {
        console.log('value:', value);
      },
      error(error) {
        console.log('error:', error);
      },
      end() {
        console.log('end');
      },
    });

    ...

    // later
    subscription.unsubscribe()

pre(title='console output')
  :escapehtml
    > value: 1
    > value: 2
    > end

p.
  В дополнение к передаче Observer, #[tt observe] может принимать обратные вызовы индивидуально:

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(1000, [1, 2]);
    stream.observe(
      function onValue(value) {
        console.log('value', value);
      },
      function onError(error) {
        console.log('error', error);
      },
      function onEnd() {
        console.log('end');
      }
    );

p.
  #[img(data-emoji="point_up")] Эти методы предназначены для замены всех других методов подписки.
  (onValue, offValue, onError, etc). Рекомендуется использовать #[b observe]
  вместо других методов, со временем они будут удалены.

+descr-method('on-value', 'onValue', 'obs.onValue(callback)').
  Подписывает обратный вызов #[b callback] на значения observable.

p.
  При вызове свойства, имеющего текущее значение, 
  #[b callback] будет вызываться немедленно (синхронно) с этим значением.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(1000, [1, 2]);
    stream.onValue(x => {
      console.log('value:', x);
    });

pre(title='console output')
  :escapehtml
    > value: 1
    > value: 2

+descr-method('off-value', 'offValue', 'obs.offValue(callback)').
  Отписывает #[b callback] от значений в observable.


+descr-method('on-error', 'onError', 'obs.onError(callback)').
  Подписывает #[b callback] на #[a(href='#about-errors') ошибки] в observable.

p.
  Если вызывается свойство, в котором есть текущая ошибка,
  #[b callback] будет вызываться немедленно (синхронно) с этой ошибкой.

pre.javascript(title='example')
  :escapehtml
    var property = Kefir.constantError(1);
    property.onError(x => {
      console.log('error:', x);
    });

pre(title='console output')
  :escapehtml
    > error: 1

+descr-method('off-error', 'offError', 'obs.offError(callback)').
  Отписывает #[b callback] от ошибок в observable.


+descr-method('on-end', 'onEnd', 'obs.onEnd(callback)').
  Подписывает #[b callback] на завершение observable.

p.
  Если observable уже завершен, #[b callback], обратный вызов будет вызываться немедленно (синхронно).

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(1000, [1, 2]);
    stream.onEnd(() => {
      console.log('stream ended');
    });

pre(title='console output')
  :escapehtml
    > stream ended

+descr-method('off-end', 'offEnd', 'obs.offEnd(callback)').
  Отписывает #[b callback] от завершения observable.

+descr-method('on-any', 'onAny', 'obs.onAny(callback)').
  Подписывает #[b callback] на все три типа событий.
  Callback вызывается с #[b event объектом] в качестве аргумента. Каждый объект event
  содержит три атрибута — #[b type], #[b value], и #[b current].

ul
  li #[b type] — это строка #[tt 'value'], #[tt 'error'], или #[tt 'end'] 
  li #[b value] — выданное #[b value] или #[b error] (#[tt undefined] если #[tt event.type === 'end'])

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(1000, [1, 2]);
    stream.onAny(event => {
      console.log('event:', event);
    });

pre(title='console output')
  :escapehtml
    > event: Object {type: "value", value: 1}
    > event: Object {type: "error", value: 2}
    > event: Object {type: "end", value: undefined}

+descr-method('off-any', 'offAny', 'obs.offAny(callback)').
  Отписывается от #[b onAny] подписчика.

+descr-method('log', 'log', 'obs.log([name])').
  Включает запись любого события в консоль браузера.
  Принимает опциональный аргумент #[b name] который будет показан в логе если он
   предоставлен.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(1000, [1, 2]);
    stream.log('my stream');

pre(title='console output')
  :escapehtml
    > my stream <value> 1
    > my stream <value> 2
    > my stream <end>

+descr-method('off-log', 'offLog', 'obs.offLog([name])').
  Выключает отображение лога. Если #[b .log] вызывался с аргументом #[b name], то и
  #[b offLog] должен быть вызван с тем-же аргументом #[b name].

+descr-method('spy', 'spy', 'obs.spy([name])').
  Включает слежку за любым событием в консоли браузера. Однако как и
  #[b .log], #[b .spy] не вызовет активацию потока сам по себе.
  Принимает опциональный аргумент #[b name] который будет отображен в логе если он
   предоставлен.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.sequentially(250, [1, 2, 3]);
    stream.spy('spied');      // stream is *not* activated here.
    stream.observe(() => {});

pre(title='console output')
  :escapehtml
    > spied <value> 1
    > spied <value> 2
    > spied <value> 3
    > spied <end>

+descr-method('off-spy', 'offSpy', 'obs.offSpy([name])').
  Отключает слежку. Если #[b .spy] был вызван с аргументом #[b name],
  #[b offSpy] должен быть вызван с тем же аргументом #[b name].
