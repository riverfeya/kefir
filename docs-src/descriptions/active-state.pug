h2#active-state Активация и деактивация observables

p.
  В момент создания observable на его источник еще нет подписки.
  Observables подписываются на свои источники только тогда, когда сами получают первого подписчика..
  В этой документации этот процесс называется  #[b активацией] observable.
  Также, когда последний подписчик удаляется из observable,
  observable #[b деактивируется] и отписывается от своего источника.
  Позже его можно будет  #[b активировать] , и т.д.

p.
  #[i источник] на который observable подписывается при #[b активации]
  может быть другим another observable (например в #[tt .map]),
  несколькими другими observables (#[tt .combine]),
  или некоторым внешним источником (#[tt .fromEvents]).

p.
  Например #[tt stream = Kefir.fromEvents(el, 'click')] не подпишется сразу на
  событие #[tt 'click'] в #[tt el],
  он подпишется только тогда, когда к потоку #[tt stream] будет добавлен первый слушатель.
  И он автоматически отпишется, когда последний слушатель будет удален из потока #[tt stream].

pre.javascript
  :escapehtml
    var stream = Kefir.fromEvents(el, 'click');
    // на данный момент слушатель событий в _el_ не добавлен

    stream.onValue(someFn);
    // теперь прослушиватель 'click' добавлен в _el_

    stream.offValue(someFn);
    // и теперь он снова удален

p.
  Как вы уже могли догадаться #[b activation] и #[b deactivation] распространяется вверх по цепочке observables.
  Например, если создать длинную цепочку вроде #[tt Kefir.fromEvents(...).map(...).filter(...).take(...)],
  вся цепочка будет неактивна - #[b inactive], пока не будет добавлен первый подписчик.
  а затем #[b активируется] до #[tt .fromEvents]. То же самое и для #[b deactivation].
