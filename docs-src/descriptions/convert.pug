h2#convert Конвертирование observables


+descr-method('to-property', 'toProperty', 'stream.toProperty([getCurrent])').
  Конвертирует поток в property.
  Принимает необязательный обратный вызов #[b getCurrent] , который будет вызываться
  при каждой #[a(href='#active-state') активации] для получения текущего значения в этот момент.

pre.javascript(title='пример')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var result = source.toProperty(() => 0);
    result.log();

pre(title='вывод в консоль')
  :escapehtml
    > [sequentially.toProperty] <value:current> 0
    > [sequentially.toProperty] <value> 1
    > [sequentially.toProperty] <value> 2
    > [sequentially.toProperty] <value> 3
    > [sequentially.toProperty] <end>

pre(title='события во времени).
  source:  ----1----2----3X
  result: 0----1----2----3X
div



+descr-method('changes', 'changes', 'property.changes()').
  Конвертирует property в stream.
  Если свойство имеет текущее значение (или ошибку), оно будет проигнорировано
  (подписчики потока его не получат).

p.
  Если вы вызываете #[b changes] в потоке, будет возвращен новый поток с удаленным
  #[a(href='#current-in-streams') текущим значением/ошибкой].

pre.javascript(title='example')
  :escapehtml
    var source = Kefir.sequentially(100, [1, 2, 3]);
    var property = source.toProperty(() => 0);
    var result = property.changes();
    result.log();

pre(title='console output')
  :escapehtml
    > [sequentially.toProperty.changes] <value> 1
    > [sequentially.toProperty.changes] <value> 2
    > [sequentially.toProperty.changes] <value> 3
    > [sequentially.toProperty.changes] <end>

pre(title='events in time').
  property: 0----1----2----3X
  result:    ----1----2----3X
div
