h2#about-errors Errors

p.
  Кефир поддерживает дополнительный канал для передачи данных через observables — errors.
  В отличие от значений, ошибки обычно просто проходят через цепочку observable
  без какого-либо преобразования. Рассмотрим пример:

pre.javascript(title='example')
  :escapehtml
    var foo = Kefir.stream(emitter => {
      emitter.emit(0);
      emitter.emit(2);
      emitter.error(-1);
      emitter.emit(3);
      emitter.end();
    });

    var bar = foo.map(x => x + 2).filter(x => x > 3);
    bar.log();


pre(title='console output')
  :escapehtml
    > [stream.map.filter] <value> 4
    > [stream.map.filter] <error> -1
    > [stream.map.filter] <value> 5
    > [stream.map.filter] <end>

pre(title='events in time')
  :escapehtml
    foo: ---0---2---e---3---X
                    -1

    bar: -------4---e---5---X
                    -1
div

p.
  Как видите, значения отображаются и фильтруются, но ошибки просто не меняются.
  Также обратите внимание, что по умолчанию observable не завершается ошибкой,
  но вы можете использовать метод  #[a(href='#take-errors') takeErrors] чтобы это произошло.
  Рассмотрим небольшое изменение в приведенном выше примере:

pre.javascript(title='example')
  :escapehtml
    var foo = Kefir.stream(emitter => {
      emitter.emit(0);
      emitter.emit(2);
      emitter.error(-1);
      emitter.emit(3);
      emitter.end();
    });

    var bar = foo.map(x => x + 2).filter(x => x > 3);
    bar.takeErrors(1).log();

pre(title='console output')
  :escapehtml
    > [stream.map.filter.takeErrors] <value:current> 4
    > [stream.map.filter.takeErrors] <error:current> -1
    > [stream.map.filter.takeErrors] <end:current>

pre(title='events in time')
  :escapehtml
    foo: ---0---2---e---3---X
                    -1

    bar: -------4---eX
                    -1
div
