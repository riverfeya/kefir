h2#create-stream Создание потока




+descr-method('never', 'never', 'Kefir.never()').
  Создает поток, который уже закончился и никогда не будет производить никаких событий.

pre.javascript(title='example').
  var stream = Kefir.never();
  stream.log();

pre(title='console output')
  :escapehtml
    > [never] <end:current>

pre(title='events in time').
  stream:  X
div




+descr-method('later', 'later', 'Kefir.later(wait, value)').
  Создает поток, который производит одно #[b value] после #[b wait] миллисекунд, а затем завершается.

pre.javascript(title='example').
  var stream = Kefir.later(1000, 1);
  stream.log();

pre(title='console output (after 1 second)')
  :escapehtml
    > [later] <value> 1
    > [later] <end>

pre(title='events in time').
  stream:  ----1X
div




+descr-method('interval', 'interval', 'Kefir.interval(interval, value)').
  Создает поток, который выдает одно и то же #[b value] каждый #[b interval] миллисекунд. Никогда не заканчивается.

pre.javascript(title='example').
  var stream = Kefir.interval(1000, 1);
  stream.log();

pre(title='console output')
  :escapehtml
    > [interval] <value> 1
    > [interval] <value> 1
    > [interval] <value> 1
    ...

pre(title='events in time').
  stream:  ----1----1----1----1---
div


+descr-method('sequentially', 'sequentially', 'Kefir.sequentially(interval, values)').
  Создает поток, содержащий заданные #[b values] (array),
  доставленный с заданным #[b interval] в миллисекундах. Заканчивается после доставки всех #[b values]. 
  

pre.javascript(title='example').
  var stream = Kefir.sequentially(1000, [1, 2, 3]);
  stream.log();

pre(title='console output')
  :escapehtml
    > [sequentially] <value> 1
    > [sequentially] <value> 2
    > [sequentially] <value> 3
    > [sequentially] <end>

pre(title='events in time').
  stream:  ----1----2----3X
div



+descr-method('from-poll', 'fromPoll', 'Kefir.fromPoll(interval, fn)').
  Создает поток, который опрашивает заданную функцию #[b fn],
  с заданным интервалом #[b interval] в миллисекундах и выдает значения возвращенные
  этой функцией. Никогда не заканчивается.

pre.javascript(title='example')
  :escapehtml
    var start = new Date();
    var stream = Kefir.fromPoll(1000, () => new Date() - start);
    stream.log();

pre(title='console output')
  :escapehtml
    > [fromPoll] <value> 1001
    > [fromPoll] <value> 2002
    > [fromPoll] <value> 3004
    > [fromPoll] <value> 4006
    > [fromPoll] <value> 5007
    > [fromPoll] <value> 6007
    ...

pre(title='events in time').
  stream:  ----•----•----•----•---
            1001 2002 3004 4006
div


+descr-method('with-interval', 'withInterval', 'Kefir.withInterval(interval, handler)').
  Общий метод создания потока на основе интервала.
  Создает поток, который вызывает заданную функцию-обработчик - #[b handler],
  с заданным интервалом #[b interval] в миллисекундах.
  The #[b handler] Функция-обработчик вызывается с одним аргументом - 
  an #[a(href="#emitter-object") эмиттером].

pre.javascript(title='example')
  :escapehtml
    var start = new Date();
    var stream = Kefir.withInterval(1000, emitter => {
      var time = new Date() - start;
      if (time < 4000) {
        emitter.emit(time);   // emit a value
      } else {
        emitter.end();        // end the stream
      }
    });
    stream.log();

pre(title='console output')
  :escapehtml
    > [withInterval] <value> 1002
    > [withInterval] <value> 2003
    > [withInterval] <value> 3005
    > [withInterval] <end>

pre(title='events in time').
  stream:  ----•----•----•----X
            1002 2003 3005
div

p.
  Вы можете вызывать методы-эмиттеры несколько раз на каждом тике интервала или не вызывать их вообще.



+descr-method('from-callback', 'fromCallback', 'Kefir.fromCallback(fn)').
  Преобразуйте функцию, которая принимает обратный вызов #[b callback]
  в качестве первого аргумента потока.
  Выдает не более одного значения, когда вызывается #[b callback], а затем завершается.  
  Функция #[b fn] будет вызываться не более одного раза, когда в поток будет добавлен первый подписчик.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.fromCallback(callback => {
      // мы используем setTimeout здесь просто для имитации некоторой асинхронной активности
      setTimeout(() => callback(1), 1000);
    });
    stream.log();

pre(title='console output')
  :escapehtml
    > [fromCallback] <value> 1
    > [fromCallback] <end>

pre(title='events in time').
  stream:  ----1X
div



+descr-method('from-node-callback', 'fromNodeCallback', 'Kefir.fromNodeCallback(fn)').
  Похоже на #[a(href='#from-callback') fromCallback],
  но обратный вызов #[b callback] переданный в #[b fn]
  является обратным вызовом в стиле Node.JS  — #[tt callback(error,&nbsp;result)].
  Если аргумент ошибки #[b error] коллбэка #[b callback] истинный,
  из потока результатов будет выдана ошибка, в противном случае будет выдано значение. 
  Поток завершится после первого значения или при ошибке.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.fromNodeCallback(callback => {
      // мы используем setTimeout здесь просто для имитации некоторой асинхронной активности
      setTimeout(() => callback(null, 1), 1000);
    });
    stream.log();

pre(title='console output')
  :escapehtml
    > [fromNodeCallback] <value> 1
    > [fromNodeCallback] <end>

pre(title='events in time').
  stream:  ----1X
div



+descr-method('from-event', 'fromEvents', 'Kefir.fromEvents(target, eventName, [transform])').
  Создает поток из событий в DOM EventTarget или объекте EventEmitter Node.JS, или в объекте, 
  который поддерживает прослушиватели событий, использующие методы #[tt on/off] (например объект jQuery).

p.
  Если предоставлена функция #[b transform], он будет вызываться для каждого
  события с теми же аргументами и контекстом (#[tt this]) что и обратный вызов слушателя событий
  И значение, возвращаемое #[b transform] будет выдано из потока.
  Если функция #[b transform] не указана, по умолчанию излучается первый аргумент 
  обратного вызова, т.е. функция #[tt x&nbsp;=&gt;&nbsp;x] используется как #[b transform].

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.fromEvents(document.body, 'click');
    stream.log()

pre(title='console output')
  :escapehtml
    > [fromEvents] <value> MouseEvent {y: 474, x: 551 ...}
    > [fromEvents] <value> MouseEvent {y: 361, x: 751 ...}
    > [fromEvents] <value> MouseEvent {y: 444, x: 1120 ...}

pre(title='events in time').
  stream:  ----•-----------•----•---
      MouseEvent   MouseEvent   MouseEvent
div




a(name='from-binder')
+descr-method('stream', 'stream', 'Kefir.stream(subscribe)').
  Создает поток общего назначения. Обратный вызов подписки #[b subscribe] 
  вызывается при каждой #[a(href='#active-state') активации],
  и если функция возвращается из подписки #[b subscribe], она будет вызываться при 
  следующей деактивации #[b deactivation].
  Функция подписки #[b subscribe] вызывается с #[a(href="#emitter-object") эмиттером] 
  в качестве аргумента, который можно использовать для генерации событий из потока результатов.

pre.javascript(title='example')
  :escapehtml
    var stream = Kefir.stream(emitter => {

      var count = 0;
      emitter.emit(count);

      var intervalId = setInterval(() => {
        count++;
        if (count < 4) {
          emitter.emit(count);
        } else {
          emitter.end();
        }
      }, 1000);

      return () => {
        clearInterval(intervalId);
      }

    });
    stream.log()

pre(title='console output')
  :escapehtml
    > [stream] <value:current> 0
    > [stream] <value> 1
    > [stream] <value> 2
    > [stream] <value> 3
    > [stream] <end>

pre(title='events in time').
  stream:  0----1----2----3----X
div





h2#create-property Создание свойства (property)



+descr-method('constant', 'constant', 'Kefir.constant(value)').
  Создает законченное свойство с указанным текущим значением #[b current value].

pre.javascript(title='example').
  var property = Kefir.constant(1);
  property.log();

pre(title='console output')
  :escapehtml
    > [constant] <value:current> 1
    > [constant] <end:current>

pre(title='events in time').
  property: 1X
div



+descr-method('constant-error', 'constantError', 'Kefir.constantError(error)').
  Создает завершенное свойство с указанной текущей ошибкой #[b current error].

pre.javascript(title='example').
  var property = Kefir.constantError(1);
  property.log();

pre(title='console output')
  :escapehtml
    > [constantError] <error:current> 1
    > [constantError] <end:current>

pre(title='events in time').
  property: eX
div
