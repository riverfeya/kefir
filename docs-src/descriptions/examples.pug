h2#examples Examples

p.
  Давайте начнем с небольшого небольшого примера, чтобы вы почувствовали, каково
  программировать с помощью Kefir. 
  Сначала мы создаем поток событий, который выдаст три числа с интервалом 
  в 100 миллисекунд:

pre.javascript(title='example')
  :escapehtml
    var numbers = Kefir.sequentially(100, [1, 2, 3]);

p.
  Теперь создадим еще один поток на основе первого. 
  Как вы могли догадаться, он произведет 2, 4 и 6.

pre.javascript(title='example')
  :escapehtml
    var numbers2 = numbers.map(x => x * 2);

p.
  Предположим, мы не хотим, чтобы число 4 было в последовательности, 
  нет проблем, мы можем отфильтровать это:

pre.javascript(title='example')
  :escapehtml
    var numbers3 = numbers2.filter(x => x !== 4);

p.
  Хорошо, я думаю, что поток Number3 - это то, что мы хотим, 
  самое время подписаться на него и получить значения:

pre.javascript(title='example')
  :escapehtml
    numbers3.onValue(x => {
      logger.log(x);
    });

script.
  function Logger(domNode, divider) {
    this.domNode = domNode;
    this.divider = divider || ' ';
    this.domNode.innerHTML = '';
  }

  Logger.prototype.log = function(x) {
    this.domNode.innerHTML += '' + x + this.divider;
  }

  function runExample1() {
    var logger = new Logger(document.querySelector('#example-log-1'));
    Kefir.sequentially(100, [1, 2, 3])
      .map(function(x) {
        return x * 2;
      })
      .filter(function(x) {
        return x !== 4;
      })
      .onValue(function(x) {
        logger.log(x);
      });
  }

p
  button(onClick='runExample1()') Запуск примера

pre(title='logger output' id='example-log-1' style='min-height:18px')

hr

p.
  Отлично, вот еще один. На этот раз начнем с потоков, основанных на действиях пользователя, 
  а не на таймере. Сначала мы создаем поток, который будет содержать события нажатия кнопки:

pre.javascript(title='example')
  :escapehtml
    var btnClicks = Kefir.fromEvents(document.querySelector('#ex-2-btn'), 'click');

p.
  Также создадим поток изменений значения ввода текста:

pre.javascript(title='example')
  :escapehtml
    var inputValue = Kefir.fromEvents(document.querySelector('#ex-2-input'), 'keyup')
      .map(event => event.target.value);

p.
  Это хорошее начало, у нас есть потоки, представляющие действия пользователя,
   теперь мы можем преобразовать и объединить их для создания желаемого 
   потока результатов. Сначала мы хотим иметь #[a(href='#about-observables') property]
  представляющий, сколько раз пользователь нажимал кнопку, мы будем использовать
  метод #[a(href='#scan') scan] чтобы создать его:

pre.javascript(title='example')
  :escapehtml
    var clicksCount = btnClicks.scan(sum => sum + 1, 0);

p.
  Теперь у нас есть два числа, первое - это количество кликов, а второе - 
  это содержимое текстового поля, которое на самом деле является строкой,
  давайте исправим это:

pre.javascript(title='example')
  :escapehtml
    var inputNumber = inputValue.map(text => parseInt(text, 10));

p.
  Готово, но теперь он может выдавать NaN, если пользователь вводит «банан» или 
  что-то в этом роде вместо числа. Давайте исправим и это, используя
  #[a(href='#about-errors') обработку ошибок] предоставляемую Kefir:

pre.javascript(title='example')
  :escapehtml
    var fixedInputNumber = inputNumber.flatMap(
      x => isNaN(x)
        ? Kefir.constantError('banana?')
        : Kefir.constant(x)
    );

p.
  Почти готово, последний шаг - объединить два наших динамических числовых значения. 
  Предположим, мы хотим их умножить:

pre.javascript(title='example')
  :escapehtml
    var theResult = Kefir.combine([fixedInputNumber, clicksCount], (a, b) => a * b);

p.
  Хорошо, выведем результат:

pre.javascript(title='example')
  :escapehtml
    var outputElement = document.querySelector('#ex-2-output');

    theResult
      .onValue(x => {
        outputElement.innerHTML = x;
      })
      .onError(error => {
        outputElement.innerHTML = '<span style="color:red">' + error + '</span>';
      });

p
  button(id='ex-2-btn') нажми меня
  = ' '
  span(id='ex-2-count-output')
  = ' * '
  input(id='ex-2-input' placeholder='попробуй "банан"')
  = ' =  '
  span(id='ex-2-output')

script.
  var clicksCount = Kefir
    .fromEvents(document.querySelector('#ex-2-btn'), 'click')
    .scan(function(sum, event) {
      return sum + 1;
    }, 0);

  var fixedInputNumber = Kefir
    .fromEvents(document.querySelector('#ex-2-input'), 'keyup')
    .map(function(event) {
      return event.target.value;
    })
    .map(function(text) {
      return parseInt(text, 10);
    })
    .flatMap(function(x) {
      return isNaN(x)
        ? Kefir.constantError('banana?')
        : Kefir.constant(x)
    });

  var theResult = Kefir.combine([fixedInputNumber, clicksCount], function(a, b) {
    return a * b;
  });

  var countOutputElement = document.querySelector('#ex-2-count-output');
  clicksCount.onValue(function(x) {
    countOutputElement.innerHTML = x;
  });

  var outputElement = document.querySelector('#ex-2-output');
  theResult
    .onValue(function(x) {
      outputElement.innerHTML = x;
    })
    .onError(function(error) {
      outputElement.innerHTML = '<span style="color:red">' + error + '</span>';
    });

hr

h3#more-examples Ещё примеры

ul
  li
    a(href="http://jsfiddle.net/fxv6dpo2/") Клик для alert
    = " (a most basic example)"
  li
    a(href="http://jsfiddle.net/vyppkj0k/3/") Часы
    = " + "
    a(href="http://jsfiddle.net/vyppkj0k/4/") Управление прокруткой
    = " + "
    a(href="http://jsfiddle.net/vyppkj0k/5/") Управление и по времени и прокруткой
  li
    a(href="http://jsfiddle.net/tn0z97e1/") МНожественный клики
  li
    a(href="http://jsfiddle.net/cbg9rdd3/") “Секретная комбинация" челлендж
    = " "
    | (отсюда #[a(href="http://www.jayway.com/2014/09/16/comparing-core-async-and-rx-by-example/") ])
  li
    a(href="http://jsfiddle.net/4Lx9ktpp/") Перетаскиваем div
  li
    a(href="http://jsfiddle.net/8sd79x3L/") Дерево
    = " (Bacon.js vs Kefir.js performance comparison)"
  li
    a(href="http://jsfiddle.net/v1Lesw91/") AJAX поиск
    = " (with errors handling and cancelation)"


p.
  #[img(data-emoji="information_desk_person")]
  Кроме того, на этой странице в консоли браузера можно запустить практически любой
  приведенный ниже фрагмент кода. 
  Так что вы можете играть с Кефиром прямо сейчас, просто откройте консоль браузера.
